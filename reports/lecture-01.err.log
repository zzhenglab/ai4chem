Traceback (most recent call last):
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "c:\users\52377\appdata\local\programs\python\python38\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# If matplotlib is not installed in your environment, uncomment the line below
# !pip install matplotlib
import numpy as np
import matplotlib.pyplot as plt

# Make synthetic calibration data (concentration in mM, absorbance unitless)
c = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
true_eps_l = 0.42  # slope
rng = np.random.default_rng(42)
A = true_eps_l * c + rng.normal(0, 0.01, size=c.size)  # small noise

# Fit line with numpy
coeffs = np.polyfit(c, A, 1)
slope, intercept = coeffs[0], coeffs[1]
fit_A = slope * c + intercept

# Compute R^2 by hand for learning
ss_res = np.sum((A - fit_A)**2)
ss_tot = np.sum((A - np.mean(A))**2)
r2 = 1 - ss_res/ss_tot

print("slope:", slope)
print("intercept:", intercept)
print("R^2:", r2)

plt.figure()
plt.scatter(c, A, label="data")
plt.plot(c, fit_A, label="fit")
plt.xlabel("Concentration (mM)")
plt.ylabel("Absorbance")
plt.title("Calibration curve")
plt.legend()
plt.show()
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[5], line 4[0m
[0;32m      1[0m [38;5;66;03m# If matplotlib is not installed in your environment, uncomment the line below[39;00m
[0;32m      2[0m [38;5;66;03m# !pip install matplotlib[39;00m
[0;32m      3[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mnp[39;00m
[1;32m----> 4[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[0;32m      6[0m [38;5;66;03m# Make synthetic calibration data (concentration in mM, absorbance unitless)[39;00m
[0;32m      7[0m c [38;5;241m=[39m np[38;5;241m.[39marray([[38;5;241m0.0[39m, [38;5;241m0.5[39m, [38;5;241m1.0[39m, [38;5;241m1.5[39m, [38;5;241m2.0[39m])

[1;31mModuleNotFoundError[0m: No module named 'matplotlib'

