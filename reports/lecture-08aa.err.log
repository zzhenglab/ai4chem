Traceback (most recent call last):
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "c:\users\52377\appdata\local\programs\python\python38\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\users\52377\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Q5 starter
from sklearn.neural_network import MLPRegressor

# PyTorch
net = nn.Sequential(nn.Linear(4,32), nn.ReLU(), nn.Linear(32,1))
opt = torch.optim.Adam(net.parameters(), lr=1e-2, weight_decay=1e-3)
for ep in range(150):
    for xb, yb in train_loader:
        opt.zero_grad(); loss = nn.MSELoss()(net(xb), yb); loss.backward(); opt.step()
with torch.no_grad():
    r2_torch = r2_score(y_te, net(torch.from_numpy(X_te_s)).cpu().numpy())

# scikit
mlp = MLPRegressor(hidden_layer_sizes=(32,), alpha=1e-3, learning_rate_init=0.01, max_iter=2000, random_state=0).fit(X_tr_s, y_tr.ravel())
r2_skl = r2_score(y_te.ravel(), mlp.predict(X_te_s))

print(f"PyTorch R2: {r2_torch:.3f}  |  scikit-learn R2: {r2_skl:.3f}")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Cell [1;32mIn[58], line 14[0m
[0;32m     11[0m     r2_torch [38;5;241m=[39m r2_score(y_te, net(torch[38;5;241m.[39mfrom_numpy(X_te_s))[38;5;241m.[39mcpu()[38;5;241m.[39mnumpy())
[0;32m     13[0m [38;5;66;03m# scikit[39;00m
[1;32m---> 14[0m mlp [38;5;241m=[39m [43mMLPRegressor[49m[43m([49m[43mhidden_layer_sizes[49m[38;5;241;43m=[39;49m[43m([49m[38;5;241;43m32[39;49m[43m,[49m[43m)[49m[43m,[49m[43m [49m[43malpha[49m[38;5;241;43m=[39;49m[38;5;241;43m1e-3[39;49m[43m,[49m[43m [49m[43mlearning_rate_init[49m[38;5;241;43m=[39;49m[38;5;241;43m0.01[39;49m[43m,[49m[43m [49m[43mmax_iter[49m[38;5;241;43m=[39;49m[38;5;241;43m2000[39;49m[43m,[49m[43m [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX_tr_s[49m[43m,[49m[43m [49m[43my_tr[49m[38;5;241;43m.[39;49m[43mravel[49m[43m([49m[43m)[49m[43m)[49m
[0;32m     15[0m r2_skl [38;5;241m=[39m r2_score(y_te[38;5;241m.[39mravel(), mlp[38;5;241m.[39mpredict(X_te_s))
[0;32m     17[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mPyTorch R2: [39m[38;5;132;01m{[39;00mr2_torch[38;5;132;01m:[39;00m[38;5;124m.3f[39m[38;5;132;01m}[39;00m[38;5;124m  |  scikit-learn R2: [39m[38;5;132;01m{[39;00mr2_skl[38;5;132;01m:[39;00m[38;5;124m.3f[39m[38;5;132;01m}[39;00m[38;5;124m"[39m)

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\base.py:1152[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[1;34m(estimator, *args, **kwargs)[0m
[0;32m   1145[0m     estimator[38;5;241m.[39m_validate_params()
[0;32m   1147[0m [38;5;28;01mwith[39;00m config_context(
[0;32m   1148[0m     skip_parameter_validation[38;5;241m=[39m(
[0;32m   1149[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[0;32m   1150[0m     )
[0;32m   1151[0m ):
[1;32m-> 1152[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:753[0m, in [0;36mBaseMultilayerPerceptron.fit[1;34m(self, X, y)[0m
[0;32m    735[0m [38;5;129m@_fit_context[39m(prefer_skip_nested_validation[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m    736[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mfit[39m([38;5;28mself[39m, X, y):
[0;32m    737[0m [38;5;250m    [39m[38;5;124;03m"""Fit the model to data matrix X and target(s) y.[39;00m
[0;32m    738[0m 
[0;32m    739[0m [38;5;124;03m    Parameters[39;00m
[1;32m   (...)[0m
[0;32m    751[0m [38;5;124;03m        Returns a trained MLP model.[39;00m
[0;32m    752[0m [38;5;124;03m    """[39;00m
[1;32m--> 753[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_fit[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mincremental[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:442[0m, in [0;36mBaseMultilayerPerceptron._fit[1;34m(self, X, y, incremental)[0m
[0;32m    435[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    436[0m         [38;5;124m"[39m[38;5;124mhidden_layer_sizes must be > 0, got [39m[38;5;132;01m%s[39;00m[38;5;124m.[39m[38;5;124m"[39m [38;5;241m%[39m hidden_layer_sizes
[0;32m    437[0m     )
[0;32m    438[0m first_pass [38;5;241m=[39m [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m"[39m[38;5;124mcoefs_[39m[38;5;124m"[39m) [38;5;129;01mor[39;00m (
[0;32m    439[0m     [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39mwarm_start [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m incremental
[0;32m    440[0m )
[1;32m--> 442[0m X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_input[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mincremental[49m[43m,[49m[43m [49m[43mreset[49m[38;5;241;43m=[39;49m[43mfirst_pass[49m[43m)[49m
[0;32m    444[0m n_samples, n_features [38;5;241m=[39m X[38;5;241m.[39mshape
[0;32m    446[0m [38;5;66;03m# Ensure y is 2D[39;00m

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:1615[0m, in [0;36mMLPRegressor._validate_input[1;34m(self, X, y, incremental, reset)[0m
[0;32m   1614[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_validate_input[39m([38;5;28mself[39m, X, y, incremental, reset):
[1;32m-> 1615[0m     X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[0;32m   1616[0m [43m        [49m[43mX[49m[43m,[49m
[0;32m   1617[0m [43m        [49m[43my[49m[43m,[49m
[0;32m   1618[0m [43m        [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mcsc[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m
[0;32m   1619[0m [43m        [49m[43mmulti_output[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[0;32m   1620[0m [43m        [49m[43my_numeric[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[0;32m   1621[0m [43m        [49m[43mdtype[49m[38;5;241;43m=[39;49m[43m([49m[43mnp[49m[38;5;241;43m.[39;49m[43mfloat64[49m[43m,[49m[43m [49m[43mnp[49m[38;5;241;43m.[39;49m[43mfloat32[49m[43m)[49m[43m,[49m
[0;32m   1622[0m [43m        [49m[43mreset[49m[38;5;241;43m=[39;49m[43mreset[49m[43m,[49m
[0;32m   1623[0m [43m    [49m[43m)[49m
[0;32m   1624[0m     [38;5;28;01mif[39;00m y[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m2[39m [38;5;129;01mand[39;00m y[38;5;241m.[39mshape[[38;5;241m1[39m] [38;5;241m==[39m [38;5;241m1[39m:
[0;32m   1625[0m         y [38;5;241m=[39m column_or_1d(y, warn[38;5;241m=[39m[38;5;28;01mTrue[39;00m)

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\base.py:622[0m, in [0;36mBaseEstimator._validate_data[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)[0m
[0;32m    620[0m         y [38;5;241m=[39m check_array(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mcheck_y_params)
[0;32m    621[0m     [38;5;28;01melse[39;00m:
[1;32m--> 622[0m         X, y [38;5;241m=[39m [43mcheck_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[0;32m    623[0m     out [38;5;241m=[39m X, y
[0;32m    625[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m check_params[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mensure_2d[39m[38;5;124m"[39m, [38;5;28;01mTrue[39;00m):

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\utils\validation.py:1164[0m, in [0;36mcheck_X_y[1;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[0;32m   1146[0m X [38;5;241m=[39m check_array(
[0;32m   1147[0m     X,
[0;32m   1148[0m     accept_sparse[38;5;241m=[39maccept_sparse,
[1;32m   (...)[0m
[0;32m   1159[0m     input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mX[39m[38;5;124m"[39m,
[0;32m   1160[0m )
[0;32m   1162[0m y [38;5;241m=[39m _check_y(y, multi_output[38;5;241m=[39mmulti_output, y_numeric[38;5;241m=[39my_numeric, estimator[38;5;241m=[39mestimator)
[1;32m-> 1164[0m [43mcheck_consistent_length[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m)[49m
[0;32m   1166[0m [38;5;28;01mreturn[39;00m X, y

File [1;32mc:\users\52377\appdata\local\programs\python\python38\lib\site-packages\sklearn\utils\validation.py:407[0m, in [0;36mcheck_consistent_length[1;34m(*arrays)[0m
[0;32m    405[0m uniques [38;5;241m=[39m np[38;5;241m.[39munique(lengths)
[0;32m    406[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(uniques) [38;5;241m>[39m [38;5;241m1[39m:
[1;32m--> 407[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    408[0m         [38;5;124m"[39m[38;5;124mFound input variables with inconsistent numbers of samples: [39m[38;5;132;01m%r[39;00m[38;5;124m"[39m
[0;32m    409[0m         [38;5;241m%[39m [[38;5;28mint[39m(l) [38;5;28;01mfor[39;00m l [38;5;129;01min[39;00m lengths]
[0;32m    410[0m     )

[1;31mValueError[0m: Found input variables with inconsistent numbers of samples: [391, 460]

